Microsoft (R) Macro Assembler Version 14.34.31937.0	    02/26/23 23:27:47
main.asm						     Page 1 - 1


				include Utilities.inc
			      C include irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
			      C include macros.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C ; ------------------------------------------------------------------
			      C get_input_matrix proto
			      C ; RECIEVES:	
			      C ;		1- String offset	(edx)
			      C ;		2- String length	(ecx)
			      C ; SPITS:
			      C ;		1- String			(edx)
			      C ;		2- Number of spaces (ebx)
			      C ; ------------------------------------------------------------------
			      C 
			      C ; ------------------------------------------------------------------
			      C print_matrix proto
			      C ; RECIEVES:	
			      C ;		1- String offset	(edx)
			      C ; ------------------------------------------------------------------
			      C 
			      C ; ------------------------------------------------------------------
			      C find_matrix_dimensions proto
			      C ; RECIEVES:	
			      C ;		1- String offset			(edx)
			      C ; SPITS:
			      C ;		1- Number of rows			(dimenison_box[0])
			      C ;		2- Number of columns		(dimenison_box[4])
			      C ;		3- Number of elements		(dimenison_box[8])
			      C ; ------------------------------------------------------------------
			      C 
			      C ; ------------------------------------------------------------------
			      C string_to_int_converter proto
			      C ; RECIEVES:	
			      C ;		1- String offset			(edx)
			      C ;		2- Array offset				(ebx)
			      C ; SPITS:
			      C ;		1- Filled array				(ebx)
			      C ; ------------------------------------------------------------------
			      C 
			      C ; ------------------------------------------------------------------
			      C rotate_matrix proto
			      C ; RECIEVES:	
			      C ;		1- Output Array offset			(edx)
			      C ;		2- Input Array offset			(ebx)
			      C ; SPITS:
			      C ;		1- Rotated array				(edx)
			      C ; ------------------------------------------------------------------
			      C 
			      C ; ------------------------------------------------------------------
			      C int_to_string_converter proto
			      C ; RECIEVES:	
			      C ;		1- String offset			(edx)
			      C ;		2- Array offset				(ebx)
			      C ; SPITS:
			      C ;		1- String					(edx)
			      C ; ------------------------------------------------------------------
			      C 
			      C ; ------------------------------------------------------------------
			      C join_strings proto
			      C ; RECIEVES:	
			      C ;		1- Source1 string offset			(edx)
			      C ;		2- Source2 string offset			(ebx)
			      C ;		3- Destination string offset		(edi)
			      C ; SPITS:
			      C ;		1- Destination string offset		(edi)
			      C ; ------------------------------------------------------------------
			      C 
			      C ; ------------------------------------------------------------------
			      C waqar proto
			      C ; RECIEVES:	
			      C ; 
			      C ; SPITS:
			      C ;		1- Choice	(eax)
			      C ; ------------------------------------------------------------------
			      C 
			      C fill_array_with_random_values proto
			      C 
 = 00000003		      C pixel_size			= 3
 = 000003E8		      C max_matrix_area		= 1000
			      C 
 = 00989680		      C heap_start			= 10000000
 = 35A4E900		      C heap_end			= 900000000
 = 055D4A80		      C other_heap_start	= 90000000
 = 3B8B87C0		      C other_heap_limit	= 999000000
			      C 
 00000000		      C .data
 00000000 4D 61 74 72 69      C 	matrix_txt										byte "Matrix.txt", 0
	   78 2E 74 78 74
	   00
 0000000B 4F 75 74 70 75      C 	output_matrix_txt								byte "Output Matrix.txt", 0
	   74 20 4D 61 74
	   72 69 78 2E 74
	   78 74 00
 0000001D 75 73 65 72 20      C 	user_se_input_lyn_txt							byte "user se input lyn.txt", 0
	   73 65 20 69 6E
	   70 75 74 20 6C
	   79 6E 2E 74 78
	   74 00
			      C 
 00000033 54 68 65 20 66      C 	original_text									byte "The followig is the matrix read from the file", 10, 10, 0
	   6F 6C 6C 6F 77
	   69 67 20 69 73
	   20 74 68 65 20
	   6D 61 74 72 69
	   78 20 72 65 61
	   64 20 66 72 6F
	   6D 20 74 68 65
	   20 66 69 6C 65
	   0A 0A 00
 00000063 0A 54 68 65 20      C 	rotated_text									byte 10, "The following is the rotated matrix", 10, 10, 0
	   66 6F 6C 6C 6F
	   77 69 6E 67 20
	   69 73 20 74 68
	   65 20 72 6F 74
	   61 74 65 64 20
	   6D 61 74 72 69
	   78 0A 0A 00
			      C 
 0000008A  000001F4 [	      C 	user_se_input_lyn_string						byte 500 dup(0)
	    00
	   ]
			      C 
			      C 
 0000027E 00000000	      C 	heap_handle										handle	?
 00000282 00000000	      C 	other_heap_handle								handle	?
 00000286 00000000	      C 	matrix_file_handle								handle	?
 0000028A 00000000	      C 	heap_handle_for_file_input_matrix				handle	?
 0000028E 00000000	      C 	heap_handle_for_user_input_matrix				handle	?
 00000292 00000000	      C 	heap_handle_for_input_dword_array_ptr			handle	?
 00000296 00000000	      C 	heap_handle_for_output_rotated_matrix_string	handle	?
 0000029A 00000000	      C 	heap_handle_for_output_rotated_matrix_array		handle	?
			      C 	
 0000029E 00000000	      C 	matrix_string_from_user_input			dd	?
 000002A2 00000000	      C 	matrix_input_from_file					dd	?
			      C 
 000002A6 00000000	      C 	random_matrix_string					dd	?
 000002AA 00000000	      C 	random_matrix_array						dd	?
 000002AE 00000000	      C 	random_matrix_string_rotated			dd	?
 000002B2 00000000	      C 	random_matrix_array_rotated				dd	?
			      C 
 000002B6 00000000	      C 	output_rotated_matrix_string			dd	?
 000002BA 00000000	      C 	output_rotated_matrix_array				dd	?
			      C 
 000002BE 00000000	      C 	output_final_string_ptr					dd	?						
			      C 	
 000002C2 000003E8	      C 	matrix_string_length					dd	max_matrix_area
			      C 
 000002C6 00000000	      C 	input_dword_array_ptr					dd	?
			      C 
			      C 
			      C 	; rows, columns, size
 000002CA  00000003 [	      C 	dimension_box			dd	3 dup(0)
	    00000000
	   ]
 000002D6 0A 0A 0A 00	      C 	lines					db	10,10,10,0
			      C 
 000002DA 0000000A	      C 	by_ten					dd	10
 000002DE 00000004	      C 	by_four					dd	4
 000002E2 00000000	      C 	_zero					dd	0
 000002E6 000003E8	      C 	_thousand				dd	1000
			      C 
 000002EA 00000000	      C 	array_size				dd	?
 000002EE 00000000	      C 	_columns				dd	?
 000002F2 00000000	      C 	_rows					dd	?
 000002F6 00000000	      C 	remainder_holder		dd	?
			      C 
 000002FA 00000064	      C 	pixel_divider			dd 100
 000002FE 00000064	      C 	divider					dd 100
			      C 
			      C 

 00000000			.code
 00000000			main proc
					; Create a private heap for the this program
					invoke HeapCreate, 0, heap_start, heap_end
 00000000  68 35A4E900	   *	    push   +035A4E900h
 00000005  68 00989680	   *	    push   +000989680h
 0000000A  6A 00	   *	    push   +000000000h
 0000000C  E8 00000000 E   *	    call   HeapCreate
 00000011  A3 0000027E R		mov heap_handle, eax

 00000016			choice:
 00000016  E8 00000000 E		call waqar

 0000001B  83 F8 03			cmp eax, 3
 0000001E  74 4B			je random
 00000020  83 F8 02			cmp eax, 2
 00000023  0F 84 000001AB		je file
 00000029  83 F8 01			cmp eax, 1
 0000002C  0F 84 0000012D		je user_input
 00000032  83 F8 00			cmp eax, 0
 00000035  0F 84 0000030F		je return


					mWrite	"INVALID INPUT"
 00000302		     1		.data		
 00000302 49 4E 56 41 4C     1		??0000 BYTE "INVALID INPUT",0	
	   49 44 20 49 4E
	   50 55 54 00
 0000003B		     1		.code
 0000003B  52		     1		push	edx
 0000003C  BA 00000302 R     1		mov	edx,OFFSET ??0000
 00000041  E8 00000000 E     1		call	WriteString
 00000046  5A		     1		pop	edx
					mWrite	10
 00000310		     1		.data		
 00000310 0A 00		     1		??0001 BYTE 10,0	
 00000047		     1		.code
 00000047  52		     1		push	edx
 00000048  BA 00000310 R     1		mov	edx,OFFSET ??0001
 0000004D  E8 00000000 E     1		call	WriteString
 00000052  5A		     1		pop	edx
					mWrite	"PRESS ANY KEY TO TRY AGAIN..."
 00000312		     1		.data		
 00000312 50 52 45 53 53     1		??0002 BYTE "PRESS ANY KEY TO TRY AGAIN...",0	
	   20 41 4E 59 20
	   4B 45 59 20 54
	   4F 20 54 52 59
	   20 41 47 41 49
	   4E 2E 2E 2E 00
 00000053		     1		.code
 00000053  52		     1		push	edx
 00000054  BA 00000312 R     1		mov	edx,OFFSET ??0002
 00000059  E8 00000000 E     1		call	WriteString
 0000005E  5A		     1		pop	edx
 0000005F  E8 00000000 E		call ReadChar
 00000064  E8 00000000 E		call clrscr
 00000069  EB AB			jmp choice

 0000006B			random:
					mWrite	"Well in that case, we need to know the dimensions"
 00000330		     1		.data		
 00000330 57 65 6C 6C 20     1		??0003 BYTE "Well in that case, we need to know the dimensions",0	
	   69 6E 20 74 68
	   61 74 20 63 61
	   73 65 2C 20 77
	   65 20 6E 65 65
	   64 20 74 6F 20
	   6B 6E 6F 77 20
	   74 68 65 20 64
	   69 6D 65 6E 73
	   69 6F 6E 73 00
 0000006B		     1		.code
 0000006B  52		     1		push	edx
 0000006C  BA 00000330 R     1		mov	edx,OFFSET ??0003
 00000071  E8 00000000 E     1		call	WriteString
 00000076  5A		     1		pop	edx
					mWrite	10
 00000362		     1		.data		
 00000362 0A 00		     1		??0004 BYTE 10,0	
 00000077		     1		.code
 00000077  52		     1		push	edx
 00000078  BA 00000362 R     1		mov	edx,OFFSET ??0004
 0000007D  E8 00000000 E     1		call	WriteString
 00000082  5A		     1		pop	edx
					mWrite	"Enter number of rows:> "
 00000364		     1		.data		
 00000364 45 6E 74 65 72     1		??0005 BYTE "Enter number of rows:> ",0	
	   20 6E 75 6D 62
	   65 72 20 6F 66
	   20 72 6F 77 73
	   3A 3E 20 00
 00000083		     1		.code
 00000083  52		     1		push	edx
 00000084  BA 00000364 R     1		mov	edx,OFFSET ??0005
 00000089  E8 00000000 E     1		call	WriteString
 0000008E  5A		     1		pop	edx
 0000008F  E8 00000000 E		call ReadDec
 00000094  A3 000002CE R		mov dimension_box[4], eax
					mWrite	"Enter number of columns:> "
 0000037C		     1		.data		
 0000037C 45 6E 74 65 72     1		??0006 BYTE "Enter number of columns:> ",0	
	   20 6E 75 6D 62
	   65 72 20 6F 66
	   20 63 6F 6C 75
	   6D 6E 73 3A 3E
	   20 00
 00000099		     1		.code
 00000099  52		     1		push	edx
 0000009A  BA 0000037C R     1		mov	edx,OFFSET ??0006
 0000009F  E8 00000000 E     1		call	WriteString
 000000A4  5A		     1		pop	edx
 000000A5  E8 00000000 E		call ReadDec
 000000AA  A3 000002CA R		mov dimension_box[0], eax

 000000AF  A1 000002CA R		mov eax, dimension_box[0]
 000000B4  0F AF 05			imul eax, dimension_box[4]
	   000002CE R
 000000BB  A3 000002D2 R		mov dimension_box[8], eax

 000000C0  8B 0D 000002D2 R		mov ecx, dimension_box[8]
 000000C6  6B C9 04			imul ecx, 4 ; dword takes 4 bytes per element
					invoke HeapAlloc, heap_handle, HEAP_ZERO_MEMORY, ecx
 000000C9  51		   *	    push   ecx
 000000CA  6A 08	   *	    push   +000000008h
 000000CC  FF 35 0000027E R *	    push   heap_handle
 000000D2  E8 00000000 E   *	    call   HeapAlloc
 000000D7  A3 000002AA R		mov random_matrix_array, eax

 000000DC  8B 15 000002AA R		mov edx, random_matrix_array
 000000E2  BB 000002CA R		mov ebx, offset dimension_box
 000000E7  E8 00000000 E		call fill_array_with_random_values

 000000EC  8B 0D 000002D2 R		mov ecx, dimension_box[8]
 000000F2  6B C9 04			imul ecx, 4
 000000F5  03 0D 000002CE R		add ecx, dimension_box[4]
 000000FB  51				push ecx
					invoke HeapAlloc, heap_handle, HEAP_ZERO_MEMORY, ecx
 000000FC  51		   *	    push   ecx
 000000FD  6A 08	   *	    push   +000000008h
 000000FF  FF 35 0000027E R *	    push   heap_handle
 00000105  E8 00000000 E   *	    call   HeapAlloc
 0000010A  A3 000002A6 R		mov random_matrix_string, eax
						
 0000010F  8B 15 000002A6 R		mov edx, random_matrix_string
 00000115  8B 1D 000002AA R		mov ebx, random_matrix_array
 0000011B  BE 000002CA R		mov esi, offset dimension_box
					invoke int_to_string_converter
 00000120  E8 00000000 E   *	    call   int_to_string_converter

					; Create a file to store to the string
					; input from the user
 00000125  BA 00000000 R		mov edx, offset matrix_txt
					invoke CreateOutputFile
 0000012A  E8 00000000 E   *	    call   CreateOutputFile
 0000012F  A3 00000286 R		mov matrix_file_handle, eax

					; Write the string to the file
 00000134  8B 15 000002A6 R		mov edx, random_matrix_string
 0000013A  59				pop ecx
					invoke WriteToFile
 0000013B  E8 00000000 E   *	    call   WriteToFile
					
					; Close the opened file for writing
 00000140  A1 00000286 R		mov eax, matrix_file_handle
					invoke CloseFile
 00000145  E8 00000000 E   *	    call   CloseFile

					invoke HeapFree, heap_handle, HEAP_ZERO_MEMORY, random_matrix_string
 0000014A  FF 35 000002A6 R *	    push   random_matrix_string
 00000150  6A 08	   *	    push   +000000008h
 00000152  FF 35 0000027E R *	    push   heap_handle
 00000158  E8 00000000 E   *	    call   HeapFree

 0000015D  EB 75			jmp file
						

 0000015F			user_input:
					invoke HeapAlloc, heap_handle, HEAP_ZERO_MEMORY, max_matrix_area
 0000015F  68 000003E8	   *	    push   +0000003E8h
 00000164  6A 08	   *	    push   +000000008h
 00000166  FF 35 0000027E R *	    push   heap_handle
 0000016C  E8 00000000 E   *	    call   HeapAlloc
 00000171  A3 0000029E R		mov matrix_string_from_user_input, eax
					
					mwrite "Enter your matrix:"
 00000397		     1		.data		
 00000397 45 6E 74 65 72     1		??0007 BYTE "Enter your matrix:",0	
	   20 79 6F 75 72
	   20 6D 61 74 72
	   69 78 3A 00
 00000176		     1		.code
 00000176  52		     1		push	edx
 00000177  BA 00000397 R     1		mov	edx,OFFSET ??0007
 0000017C  E8 00000000 E     1		call	WriteString
 00000181  5A		     1		pop	edx
					mwrite 10
 000003AA		     1		.data		
 000003AA 0A 00		     1		??0008 BYTE 10,0	
 00000182		     1		.code
 00000182  52		     1		push	edx
 00000183  BA 000003AA R     1		mov	edx,OFFSET ??0008
 00000188  E8 00000000 E     1		call	WriteString
 0000018D  5A		     1		pop	edx
					
					; Get input into the string
 0000018E  8B 15 0000029E R		mov edx, matrix_string_from_user_input
 00000194  B9 000003E8			mov ecx, max_matrix_area
					invoke get_input_matrix
 00000199  E8 00000000 E   *	    call   get_input_matrix
 0000019E  89 1D 000002C2 R		mov matrix_string_length, ebx
 000001A4  FF 05 000002C2 R		inc matrix_string_length

					; Create a file to store to the string
					; input from the user
 000001AA  BA 00000000 R		mov edx, offset matrix_txt
					invoke CreateOutputFile
 000001AF  E8 00000000 E   *	    call   CreateOutputFile
 000001B4  A3 00000286 R		mov matrix_file_handle, eax

					; Write the string to the file
 000001B9  8B 15 0000029E R		mov edx, matrix_string_from_user_input
 000001BF  8B 0D 000002C2 R		mov ecx, matrix_string_length
					invoke WriteToFile
 000001C5  E8 00000000 E   *	    call   WriteToFile
					
					; Close the opened file for writing
 000001CA  A1 00000286 R		mov eax, matrix_file_handle
					invoke CloseFile
 000001CF  E8 00000000 E   *	    call   CloseFile

 000001D4			file:
					invoke HeapAlloc, heap_handle, HEAP_ZERO_MEMORY, matrix_string_length
 000001D4  FF 35 000002C2 R *	    push   matrix_string_length
 000001DA  6A 08	   *	    push   +000000008h
 000001DC  FF 35 0000027E R *	    push   heap_handle
 000001E2  E8 00000000 E   *	    call   HeapAlloc
 000001E7  A3 000002A2 R		mov matrix_input_from_file, eax

					; Open a file for inputing data
 000001EC  BA 00000000 R		mov edx, offset matrix_txt
					invoke OpenInputFile
 000001F1  E8 00000000 E   *	    call   OpenInputFile
 000001F6  A3 0000028A R		mov heap_handle_for_file_input_matrix, eax

					; Read from the opened file into the
					; new string allocated on the heap
 000001FB  A1 0000028A R		mov eax, heap_handle_for_file_input_matrix
 00000200  8B 0D 000002C2 R		mov ecx, matrix_string_length
 00000206  8B 15 000002A2 R		mov edx, matrix_input_from_file
					invoke ReadFromFile
 0000020C  E8 00000000 E   *	    call   ReadFromFile

					; Close the input file
 00000211  A1 0000028A R		mov eax, heap_handle_for_file_input_matrix
					invoke CloseFile
 00000216  E8 00000000 E   *	    call   CloseFile

					; mov edx, matrix_input_from_file
					;invoke print_matrix
					
 0000021B			dimensions:
 0000021B  8B 15 000002A2 R		mov edx, matrix_input_from_file
 00000221  BB 000002CA R		mov ebx, offset dimension_box
					invoke find_matrix_dimensions
 00000226  E8 00000000 E   *	    call   find_matrix_dimensions

 0000022B			allocate_input_array:
 0000022B  8B 0D 000002D2 R		mov ecx, dimension_box[8]
 00000231  6B C9 05			imul ecx, 5 ; dword takes 4 bytes per element
					invoke HeapAlloc, heap_handle, HEAP_ZERO_MEMORY, ecx
 00000234  51		   *	    push   ecx
 00000235  6A 08	   *	    push   +000000008h
 00000237  FF 35 0000027E R *	    push   heap_handle
 0000023D  E8 00000000 E   *	    call   HeapAlloc
 00000242  A3 000002C6 R		mov input_dword_array_ptr, eax

 00000247			convert_string_to_int:
					; Convert the string-numbers into integer-numbers
 00000247  8B 35 000002A2 R		mov esi, matrix_input_from_file	; string
 0000024D  8B 1D 000002C6 R		mov ebx, input_dword_array_ptr	; array
					invoke string_to_int_converter
 00000253  E8 00000000 E   *	    call   string_to_int_converter


 00000258			allocate_output_matrix_array:
 00000258  8B 0D 000002D2 R		mov ecx, dimension_box[8]
 0000025E  6B C9 04			imul ecx, 4 ; dword takes 4 bytes per element
					invoke HeapAlloc, heap_handle, HEAP_ZERO_MEMORY, ecx
 00000261  51		   *	    push   ecx
 00000262  6A 08	   *	    push   +000000008h
 00000264  FF 35 0000027E R *	    push   heap_handle
 0000026A  E8 00000000 E   *	    call   HeapAlloc
 0000026F  A3 000002BA R		mov output_rotated_matrix_array, eax

					; Rotate the matrix
 00000274  8B 15 000002BA R		mov edx, output_rotated_matrix_array
 0000027A  8B 1D 000002C6 R		mov ebx, input_dword_array_ptr
 00000280  BE 000002CA R		mov esi, offset dimension_box
					invoke rotate_matrix
 00000285  E8 00000000 E   *	    call   rotate_matrix


 0000028A			allocate_output_matrix_string:
					; Create a new heap
					invoke HeapCreate, 0, other_heap_start, other_heap_limit
 0000028A  68 3B8B87C0	   *	    push   +03B8B87C0h
 0000028F  68 055D4A80	   *	    push   +0055D4A80h
 00000294  6A 00	   *	    push   +000000000h
 00000296  E8 00000000 E   *	    call   HeapCreate
 0000029B  A3 00000282 R		mov other_heap_handle, eax

					; Allocate the required bytes for the output string
 000002A0  8B 0D 000002D2 R		mov ecx, dimension_box[8]
 000002A6  6B C9 05			imul ecx, 5 ; each pixel is three characters long, there're spaces, '\n' and '\r'
					invoke HeapAlloc, other_heap_handle, HEAP_ZERO_MEMORY, ecx
 000002A9  51		   *	    push   ecx
 000002AA  6A 08	   *	    push   +000000008h
 000002AC  FF 35 00000282 R *	    push   other_heap_handle
 000002B2  E8 00000000 E   *	    call   HeapAlloc
 000002B7  A3 000002B6 R		mov output_rotated_matrix_string, eax
					
 000002BC  8B 15 000002B6 R		mov edx, output_rotated_matrix_string
 000002C2  8B 1D 000002BA R		mov ebx, output_rotated_matrix_array
 000002C8  BE 000002CA R		mov esi, offset dimension_box
					invoke int_to_string_converter
 000002CD  E8 00000000 E   *	    call   int_to_string_converter

 000002D2			allocat_final_string:
 000002D2  8B 0D 000002D2 R		mov ecx, dimension_box[8]
 000002D8  6B C9 05			imul ecx, 5
 000002DB  6B C9 03			imul ecx, 3
					invoke HeapAlloc, other_heap_handle, HEAP_ZERO_MEMORY, ecx
 000002DE  51		   *	    push   ecx
 000002DF  6A 08	   *	    push   +000000008h
 000002E1  FF 35 00000282 R *	    push   other_heap_handle
 000002E7  E8 00000000 E   *	    call   HeapAlloc
 000002EC  A3 000002BE R		mov output_final_string_ptr, eax

 000002F1			join_final_strings:
 000002F1  8B 15 000002A2 R		mov edx, matrix_input_from_file
 000002F7  8B 1D 000002B6 R		mov ebx, output_rotated_matrix_string
 000002FD  8B 3D 000002BE R		mov edi, output_final_string_ptr
					invoke join_strings
 00000303  E8 00000000 E   *	    call   join_strings

					mWriteString lines
 00000308  52		     1		push edx
 00000309  BA 000002D6 R     1		mov  edx,OFFSET lines
 0000030E  E8 00000000 E     1		call WriteString
 00000313  5A		     1		pop  edx
 00000314  8B 15 000002BE R		mov edx, output_final_string_ptr
					invoke print_matrix
 0000031A  E8 00000000 E   *	    call   print_matrix


 0000031F  BA 0000000B R		mov edx, offset output_matrix_txt
 00000324  E8 00000000 E		call CreateOutputFile
 00000329  A3 00000286 R		mov matrix_file_handle, eax

 0000032E  8B 15 000002BE R		mov edx, output_final_string_ptr
 00000334  8B CE			mov ecx, esi
 00000336  A1 00000286 R		mov eax, matrix_file_handle
 0000033B  E8 00000000 E		call WriteToFile

 00000340  A1 00000286 R		mov eax, matrix_file_handle
 00000345  E8 00000000 E		call CloseFile



 0000034A			return:
					mWriteString	lines
 0000034A  52		     1		push edx
 0000034B  BA 000002D6 R     1		mov  edx,OFFSET lines
 00000350  E8 00000000 E     1		call WriteString
 00000355  5A		     1		pop  edx
					mWriteSpace		dimension_box[4]
 000003AC		     1	.data
 000003AC 00		     1	??0009 BYTE dimension_box[4] DUP(' '),0
main.asm(217) : error A2026:constant expected
 mWriteSpace(8): Macro Called From
  main.asm(217): Main Line Code
 00000356		     1	.code
 00000356  52		     1		push	edx
 00000357  BA 000003AC R     1		mov	edx,OFFSET ??0009
 0000035C  E8 00000000 E     1		call	WriteString
 00000361  5A		     1		pop	edx
					mWrite			"HAVE A NICE DAY"
 000003AD		     1		.data		
 000003AD 48 41 56 45 20     1		??000A BYTE "HAVE A NICE DAY",0	
	   41 20 4E 49 43
	   45 20 44 41 59
	   00
 00000362		     1		.code
 00000362  52		     1		push	edx
 00000363  BA 000003AD R     1		mov	edx,OFFSET ??000A
 00000368  E8 00000000 E     1		call	WriteString
 0000036D  5A		     1		pop	edx
					mWriteString	lines
 0000036E  52		     1		push edx
 0000036F  BA 000002D6 R     1		mov  edx,OFFSET lines
 00000374  E8 00000000 E     1		call WriteString
 00000379  5A		     1		pop  edx
					mWrite			" ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### "
 000003BD		     1		.data		
 000003BD 20 23 23 23 20     1		??000B BYTE " ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ",0	
	   23 23 23 20 23
	   23 23 20 23 23
	   23 20 23 23 23
	   20 23 23 23 20
	   23 23 23 20 23
	   23 23 20 23 23
	   23 20 23 23 23
	   20 23 23 23 20
	   23 23 23 20 23
	   23 23 20 23 23
	   23 20 23 23 23
	   20 00
 0000037A		     1		.code
 0000037A  52		     1		push	edx
 0000037B  BA 000003BD R     1		mov	edx,OFFSET ??000B
 00000380  E8 00000000 E     1		call	WriteString
 00000385  5A		     1		pop	edx
					mWriteString	lines
 00000386  52		     1		push edx
 00000387  BA 000002D6 R     1		mov  edx,OFFSET lines
 0000038C  E8 00000000 E     1		call WriteString
 00000391  5A		     1		pop  edx

					invoke ExitProcess, 0
 00000392  6A 00	   *	    push   +000000000h
 00000394  E8 00000000 E   *	    call   ExitProcess
 00000399			main endp


				; <><><><><><><> 
				;   ENTRY POINT 
				; <><><><><><><>
				end main
Microsoft (R) Macro Assembler Version 14.34.31937.0	    02/26/23 23:27:47
main.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000003FB Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000399 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
fill_array_with_random_values  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
find_matrix_dimensions . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
get_input_matrix . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
int_to_string_converter  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
join_strings . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000399 Public STDCALL
  choice . . . . . . . . . . . .	L Near	 00000016 _TEXT	
  random . . . . . . . . . . . .	L Near	 0000006B _TEXT	
  user_input . . . . . . . . . .	L Near	 0000015F _TEXT	
  file . . . . . . . . . . . . .	L Near	 000001D4 _TEXT	
  dimensions . . . . . . . . . .	L Near	 0000021B _TEXT	
  allocate_input_array . . . . .	L Near	 0000022B _TEXT	
  convert_string_to_int  . . . .	L Near	 00000247 _TEXT	
  allocate_output_matrix_array .	L Near	 00000258 _TEXT	
  allocate_output_matrix_string 	L Near	 0000028A _TEXT	
  allocat_final_string . . . . .	L Near	 000002D2 _TEXT	
  join_final_strings . . . . . .	L Near	 000002F1 _TEXT	
  return . . . . . . . . . . . .	L Near	 0000034A _TEXT	
print_matrix . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
rotate_matrix  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
string_to_int_converter  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
waqar  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 00000302 _DATA	
??0001 . . . . . . . . . . . . .	Byte	 00000310 _DATA	
??0002 . . . . . . . . . . . . .	Byte	 00000312 _DATA	
??0003 . . . . . . . . . . . . .	Byte	 00000330 _DATA	
??0004 . . . . . . . . . . . . .	Byte	 00000362 _DATA	
??0005 . . . . . . . . . . . . .	Byte	 00000364 _DATA	
??0006 . . . . . . . . . . . . .	Byte	 0000037C _DATA	
??0007 . . . . . . . . . . . . .	Byte	 00000397 _DATA	
??0008 . . . . . . . . . . . . .	Byte	 000003AA _DATA	
??0009 . . . . . . . . . . . . .	Byte	 000003AC _DATA	
??000A . . . . . . . . . . . . .	Byte	 000003AD _DATA	
??000B . . . . . . . . . . . . .	Byte	 000003BD _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
_columns . . . . . . . . . . . .	DWord	 000002EE _DATA	
_rows  . . . . . . . . . . . . .	DWord	 000002F2 _DATA	
_thousand  . . . . . . . . . . .	DWord	 000002E6 _DATA	
_zero  . . . . . . . . . . . . .	DWord	 000002E2 _DATA	
array_size . . . . . . . . . . .	DWord	 000002EA _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
by_four  . . . . . . . . . . . .	DWord	 000002DE _DATA	
by_ten . . . . . . . . . . . . .	DWord	 000002DA _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dimension_box  . . . . . . . . .	DWord	 000002CA _DATA	
divider  . . . . . . . . . . . .	DWord	 000002FE _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
heap_end . . . . . . . . . . . .	Number	 35A4E900h   
heap_handle_for_file_input_matrix 	DWord	 0000028A _DATA	
heap_handle_for_input_dword_array_ptr 	DWord	 00000292 _DATA	
heap_handle_for_output_rotated_matrix_array  DWord    0000029A _DATA	
heap_handle_for_output_rotated_matrix_string . DWord    00000296 _DATA	
heap_handle_for_user_input_matrix 	DWord	 0000028E _DATA	
heap_handle  . . . . . . . . . .	DWord	 0000027E _DATA	
heap_start . . . . . . . . . . .	Number	 00989680h   
input_dword_array_ptr  . . . . .	DWord	 000002C6 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
lines  . . . . . . . . . . . . .	Byte	 000002D6 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
matrix_file_handle . . . . . . .	DWord	 00000286 _DATA	
matrix_input_from_file . . . . .	DWord	 000002A2 _DATA	
matrix_string_from_user_input  .	DWord	 0000029E _DATA	
matrix_string_length . . . . . .	DWord	 000002C2 _DATA	
matrix_txt . . . . . . . . . . .	Byte	 00000000 _DATA	
max_matrix_area  . . . . . . . .	Number	 000003E8h   
original_text  . . . . . . . . .	Byte	 00000033 _DATA	
other_heap_handle  . . . . . . .	DWord	 00000282 _DATA	
other_heap_limit . . . . . . . .	Number	 3B8B87C0h   
other_heap_start . . . . . . . .	Number	 055D4A80h   
output_final_string_ptr  . . . .	DWord	 000002BE _DATA	
output_matrix_txt  . . . . . . .	Byte	 0000000B _DATA	
output_rotated_matrix_array  . .	DWord	 000002BA _DATA	
output_rotated_matrix_string . .	DWord	 000002B6 _DATA	
pixel_divider  . . . . . . . . .	DWord	 000002FA _DATA	
pixel_size . . . . . . . . . . .	Number	 00000003h   
random_matrix_array_rotated  . .	DWord	 000002B2 _DATA	
random_matrix_array  . . . . . .	DWord	 000002AA _DATA	
random_matrix_string_rotated . .	DWord	 000002AE _DATA	
random_matrix_string . . . . . .	DWord	 000002A6 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
remainder_holder . . . . . . . .	DWord	 000002F6 _DATA	
rotated_text . . . . . . . . . .	Byte	 00000063 _DATA	
user_se_input_lyn_string . . . .	Byte	 0000008A _DATA	
user_se_input_lyn_txt  . . . . .	Byte	 0000001D _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   1 Errors
